//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;

#if true
namespace KRASH
{
#if true
    public class WireFrame : MonoBehaviour
    {

        // Use this for initialization
        void Start()
        {
        }

        // Update is called once per frame
        void Update()
        {
          
        }

        void OnPreRender()
        {
           
              GL.wireframe = true;
        }

        void OnPostRender()
        {
            GL.wireframe = false;
        }
    }

#else



    public class WireFrame : MonoBehaviour
    {
        private static Material _material;

        public static Material lineMaterial => _material ?? (_material = new Material(Shader.Find("Particles/Alpha Blended")));
        public Color lineColor = new Color(0.0f, 1.0f, 0.0f);

        private Mesh toRender;

        void Start()
        {
            Log.Info("WireFrame.Start");
            lineMaterial.hideFlags = HideFlags.HideAndDontSave;
            lineMaterial.shader.hideFlags = HideFlags.HideAndDontSave;

            toRender = new Mesh();
        }

        Part p;
        void OnRenderObject()
        {
            
            p = GetComponent<Part>();
            Log.Info("OnRenderObject, part: " + p.partInfo.name);
            var mf = p.FindModelComponents<MeshFilter>();
            var smr = p.FindModelComponents<SkinnedMeshRenderer>();

            Log.Info("OnRenderObject, name: " + this.name);
            Log.Info("camera: " + Camera.current.ToString());
            //MeshFilter filter = GetComponent<MeshFilter>();
            //if (filter)
            foreach (var filter in mf)
            {
                Log.Info("filter");
                DoRender(filter.mesh);
                return;
            }

            //SkinnedMeshRenderer skinned = GetComponent<SkinnedMeshRenderer>();
            //if (skinned)
            foreach (var skinned in smr)
            {
                Log.Info("skinned");
                skinned.BakeMesh(toRender);

                Vector3[] verts = toRender.vertices;

                for (int i = 0; i < verts.Length; i++)
                {
                    float x = verts[i].x;
                    float y = verts[i].y;
                    float z = verts[i].z;
                    verts[i] = new Vector3(x / transform.lossyScale.x, y / transform.lossyScale.y, z / transform.lossyScale.z);
                }

                toRender.vertices = verts;
                
                DoRender(toRender);
            }
        }

        void DoRender(Mesh mesh)
        {
            Log.Info("DoRender");

            if (mesh == null ||transform == null || lineMaterial == null)
                return;
            GL.wireframe = true;

            lineMaterial.color = lineColor;

            lineMaterial.SetPass(0);
            try
            {
                Graphics.DrawMeshNow(mesh, p.partTransform.localToWorldMatrix);
               // Graphics.DrawMeshNow(mesh, p.partTransform.position, p.partTransform.rotation);
            }
            catch (Exception) { }
            GL.wireframe = false;
        }
    }


#endif

}
#endif